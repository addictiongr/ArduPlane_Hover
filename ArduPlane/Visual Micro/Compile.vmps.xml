<VisualMicro>
  <Program Name="ArduPlane" Ext=".pde" Location="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane">
    <Debug RemotePortTransport="FastSerial" DebugMode="Full" DebugEnabled="1" LocalPort="COM11" LocalPortSpeed="115200" RemotePortSpeed="115200" RemotePort="Serial1" />
    <Compile CompilerErrors="0" ConfigurationName="Debug" StopOnError="True" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560" SketchName="ArduPlane" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 80;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_FASTSERIAL;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="Arduino">
      <Board Name="mega2560" Description="Arduino Mega 2560 or Mega ADK" CoreFolder="C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows\hardware\arduino\cores\arduino" VariantFullPath="C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows\hardware\arduino\variants\mega" McuIdePath="C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows" McuSketchBookPath="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover" name="Arduino Mega 2560 or Mega ADK" upload.protocol="wiring" upload.maximum_size="258048" upload.speed="115200" bootloader.low_fuses="0xFF" bootloader.high_fuses="0xD8" bootloader.extended_fuses="0xFD" bootloader.path="stk500v2" bootloader.file="stk500boot_v2_mega2560.hex" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" build.mcu="atmega2560" build.f_cpu="16000000L" build.core="arduino" build.variant="mega" runtime.ide.path="C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows" build.system.path="C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows\hardware\arduino\system" software="ARDUINO" runtime.ide.version="101" build.core.vmresolved="C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows\hardware\arduino\cores\arduino" build.core.parentfolder.vmresolved="C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows\hardware\arduino\cores" build.core.coresparentfolder.vmresolved="C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows\hardware\arduino" vm.core.include="arduino.h" vm.boardsource.path="C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows\hardware\arduino" vm.boardsource.name="boards.txt" vm.platformname.name="" build.variant.vmresolved="C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows\hardware\arduino\variants\mega" compiler.path="C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows\hardware\tools\avr\bin\" includes=" -I&quot;C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows\hardware\arduino\cores\arduino&quot;  -I&quot;C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows\hardware\arduino\variants\mega&quot;  -I&quot;C:\Program Files (x86)\Visual Micro\Visual Micro for Arduino\Micro Platforms\Arduino\Templates\Hardware\Debuggers\VM_DBG&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\FastSerial&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_Common&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_Menu&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\Arduino_Mega_ISR_Registry&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\APM_RC&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_GPS&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\I2C&quot;  -I&quot;C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows\libraries\SPI&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_Semaphore&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\DataFlash&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_ADC&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_AnalogSource&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_PeriodicProcess&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_Baro&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_Compass&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_Math&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_InertialSensor&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_IMU&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_AHRS&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\PID&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\RC_Channel&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_RangeFinder&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\Filter&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_Relay&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_Camera&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_Airspeed&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\memcheck&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\APM_Control&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\GCS_MAVLink&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_Mount&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\AP_Declination&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\APM_OBC&quot;  -I&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\SITL&quot; " build.path="C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560" build.project_name="ArduPlane" build.variant.path="C:\Users\Brian\Documents\ArduPilot-Arduino-1.0.3-windows\hardware\arduino\variants\mega" archive_file="core.a" object_file="&quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\SITL\SITL.cpp.o&quot;" source_file="&quot;C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\libraries\SITL\SITL.cpp&quot;" object_files="&quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\ArduPlane.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\VM_DBG\VM_mem_check.c.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\VM_DBG\VM_DBG.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\FastSerial\ftoa_engine.S.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\FastSerial\ultoa_invert.S.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\FastSerial\BetterStream.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\FastSerial\FastSerial.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\FastSerial\vprintf.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Common\AP_Common.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Common\AP_Loop.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Common\AP_MetaClass.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Common\AP_Param.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Common\AP_Var_menufuncs.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Common\c++.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Menu\AP_Menu.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\Arduino_Mega_ISR_Registry\Arduino_Mega_ISR_Registry.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\APM_RC\APM_RC_APM1.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\APM_RC\APM_RC_APM2.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_GPS\AP_GPS_406.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_GPS\AP_GPS_Auto.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_GPS\AP_GPS_HIL.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_GPS\AP_GPS_IMU.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_GPS\AP_GPS_MTK.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_GPS\AP_GPS_MTK16.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_GPS\AP_GPS_NMEA.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_GPS\AP_GPS_SIRF.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_GPS\AP_GPS_UBLOX.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_GPS\GPS.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\I2C\I2C.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\SPI\SPI.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Semaphore\AP_Semaphore.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\DataFlash\DataFlash.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\DataFlash\DataFlash_APM1.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\DataFlash\DataFlash_APM2.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_ADC\AP_ADC.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_ADC\AP_ADC_ADS7844.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_ADC\AP_ADC_HIL.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_AnalogSource\AP_AnalogSource_ADC.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_AnalogSource\AP_AnalogSource_Arduino.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_PeriodicProcess\AP_PeriodicProcessStub.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_PeriodicProcess\AP_TimerProcess.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Baro\AP_Baro.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Baro\AP_Baro_BMP085.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Baro\AP_Baro_BMP085_hil.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Baro\AP_Baro_MS5611.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Compass\AP_Compass_HIL.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Compass\AP_Compass_HMC5843.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Compass\Compass.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Math\AP_Math.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Math\location.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Math\matrix3.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Math\polygon.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Math\quaternion.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Math\vector3.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_InertialSensor\AP_InertialSensor_MPU6000.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_InertialSensor\AP_InertialSensor_Oilpan.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_InertialSensor\AP_InertialSensor_Stub.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_IMU\AP_IMU_INS.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_IMU\AP_IMU_Shim.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_IMU\IMU.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_AHRS\AP_AHRS.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_AHRS\AP_AHRS_DCM.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_AHRS\AP_AHRS_HIL.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_AHRS\AP_AHRS_MPU6000.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_AHRS\Quaternion.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\PID\PID.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\RC_Channel\RC_Channel.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\RC_Channel\RC_Channel_aux.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_RangeFinder\AP_RangeFinder_MaxsonarXL.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_RangeFinder\AP_RangeFinder_SharpGP2Y.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_RangeFinder\RangeFinder.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\Filter\DerivativeFilter.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Relay\AP_Relay.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Camera\AP_Camera.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Airspeed\AP_Airspeed.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\memcheck\memcheck.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\APM_Control\AP_PitchController.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\APM_Control\AP_RollController.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\APM_Control\AP_YawController.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\GCS_MAVLink\GCS_MAVLink.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Mount\AP_Mount.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\AP_Declination\AP_Declination.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\APM_OBC\APM_OBC.cpp.o&quot; &quot;C:\Users\Brian\AppData\Local\VMicro\Arduino\Builds\ArduPlane\mega2560\SITL\SITL.cpp.o&quot; " />
    </Platform>
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="ArduPlane.pde, line 807" Id="d12d082d-520d-4694-a761-7b80822daaeb" Enabled="0" Message="q1: {qcurrent.q1}, q2: {qcurrent.q2}, q3: {qcurrent.q3}, q4: {qcurrent.q4}" MessageTextType="0" PreProcessedMessage="q1: {0}, q2: {1}, q3: {2}, q4: {3}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\ArduPlane.pde" FileLine="807" FileColumn="1" FunctionName="fast_loop()" FunctionLineOffset="27" FunctionColumnOffset="1" HitCountTarget="50" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d12d082d-520d-4694-a761-7b80822daaeb'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>800	    // update hil before AHRS update
801	    gcs_update();
802	#endif
803	
804	    ahrs.update();
805	///////////// Quaternion stuff I added ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
806		// Convert current euler angles to quaternion
--&gt;807		qcurrent.from_euler(ahrs.roll, ahrs.pitch, ahrs.yaw);
808	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
809	
810	    // uses the yaw from the DCM to give more accurate turns
811	    calc_bearing_error();
812	
813	# if HIL_MODE == HIL_MODE_DISABLED
814	    if (g.log_bitmask &amp; MASK_LOG_ATTITUDE_FAST)
815	        Log_Write_Attitude(ahrs.roll_sensor, ahrs.pitch_sensor, ahrs.yaw_sensor);
816	
</Source>
        <MessageVariables>
          <MessageVariable Name="qcurrent.q1" Index="1" />
          <MessageVariable Name="qcurrent.q2" Index="2" />
          <MessageVariable Name="qcurrent.q3" Index="3" />
          <MessageVariable Name="qcurrent.q4" Index="4" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="2" Name="ArduPlane.pde, line 830" Id="4dc5b751-fad3-4e5b-81b0-d2cc5833084d" Enabled="1" Message="Mode: {control_mode}" MessageTextType="0" PreProcessedMessage="Mode: {0}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\ArduPlane.pde" FileLine="830" FileColumn="1" FunctionName="fast_loop()" FunctionLineOffset="50" FunctionColumnOffset="1" HitCountTarget="250" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='4dc5b751-fad3-4e5b-81b0-d2cc5833084d'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>823	#if INERTIAL_NAVIGATION == ENABLED
824	    // TODO: implement inertial nav function
825	    inertialNavigation();
826	#endif
827	
828	    // custom code/exceptions for flight modes
829	    // ---------------------------------------
--&gt;830	    update_current_flight_mode();
831	
832	    // apply desired roll, pitch and yaw to the plane
833	    // ----------------------------------------------
834	    if (control_mode &gt; MANUAL)
835	        stabilize();
836	
837	    // write out the servo PWM values
838	    // ------------------------------
839	    set_servos();
</Source>
        <MessageVariables>
          <MessageVariable Name="control_mode" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="3" Name="Attitude.pde, line 86" Id="31535a3d-43e4-4175-9181-7b110ccecf09" Enabled="0" Message="Roll PID Input: {roll_PID_input}" MessageTextType="0" PreProcessedMessage="Roll PID Input: {0}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\Attitude.pde" FileLine="86" FileColumn="1" FunctionName="stabilize()" FunctionLineOffset="29" FunctionColumnOffset="1" HitCountTarget="50" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='31535a3d-43e4-4175-9181-7b110ccecf09'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>79		
80		// Use quaternions for hover mode /////////////////////////////////////////////////////////
81		if (control_mode == HOVER_PID || control_mode == HOVER_PID_REFERENCE || control_mode == HOVER_ADAPTIVE) {
82			roll_PID_input = roll_error_centdeg;
83		}	else {
84			roll_PID_input = (nav_roll_cd - ahrs.roll_sensor);
85		}
--&gt;86		g.channel_roll.servo_out = g.pidServoRoll.get_pid(roll_PID_input, speed_scaler);
87		// Calculate dersired servo output for the roll
88		// ---------------------------------------------
89		//g.channel_roll.servo_out = g.pidServoRoll.get_pid((nav_roll_cd - ahrs.roll_sensor), speed_scaler);
90	
91		// Use quaternions for hover mode /////////////////////////////////////////////////////////
92		if (control_mode == HOVER_PID || control_mode == HOVER_PID_REFERENCE || control_mode == HOVER_ADAPTIVE) {
93			pitch_PID_input = pitch_error_centdeg;
94		}	else {	
95			int32_t tempcalc = nav_pitch_cd +
</Source>
        <MessageVariables>
          <MessageVariable Name="roll_PID_input" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="4" Name="Attitude.pde, line 82" Id="71b6c2b4-3224-4e2a-9c68-4231c88b8bb9" Enabled="0" Message="Using quaternions to stabilize" MessageTextType="0" PreProcessedMessage="Using quaternions to stabilize" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\Attitude.pde" FileLine="82" FileColumn="1" FunctionName="stabilize()" FunctionLineOffset="25" FunctionColumnOffset="1" HitCountTarget="50" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='71b6c2b4-3224-4e2a-9c68-4231c88b8bb9'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>75	        if (ahrs.roll_sensor &lt; 0) nav_roll_cd -= 36000;
76	    }
77	
78	#if APM_CONTROL == DISABLED
79		
80		// Use quaternions for hover mode /////////////////////////////////////////////////////////
81		if (control_mode == HOVER_PID || control_mode == HOVER_PID_REFERENCE || control_mode == HOVER_ADAPTIVE) {
--&gt;82			roll_PID_input = roll_error_centdeg;
83		}	else {
84			roll_PID_input = (nav_roll_cd - ahrs.roll_sensor);
85		}
86		g.channel_roll.servo_out = g.pidServoRoll.get_pid(roll_PID_input, speed_scaler);
87		// Calculate dersired servo output for the roll
88		// ---------------------------------------------
89		//g.channel_roll.servo_out = g.pidServoRoll.get_pid((nav_roll_cd - ahrs.roll_sensor), speed_scaler);
90	
91		// Use quaternions for hover mode /////////////////////////////////////////////////////////
</Source>
      </BreakPoint>
      <BreakPoint Index="5" Name="Attitude.pde, line 105" Id="231e64fd-b9cc-4ecd-8795-aa27c75a5e02" Enabled="0" Message="Pitch Input: {pitch_PID_input}" MessageTextType="0" PreProcessedMessage="Pitch Input: {0}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\Attitude.pde" FileLine="105" FileColumn="1" FunctionName="stabilize()" FunctionLineOffset="48" FunctionColumnOffset="1" HitCountTarget="50" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='231e64fd-b9cc-4ecd-8795-aa27c75a5e02'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>98					(ahrs.pitch_sensor - g.pitch_trim_cd);
99			if (inverted_flight) {
100				// when flying upside down the elevator control is inverted
101				tempcalc = -tempcalc;
102			}
103			pitch_PID_input = tempcalc;
104		}
--&gt;105		g.channel_pitch.servo_out = g.pidServoPitch.get_pid(pitch_PID_input, speed_scaler);
106		//g.channel_pitch.servo_out = g.pidServoPitch.get_pid(tempcalc, speed_scaler);
107	#else // APM_CONTROL == ENABLED
108	    // calculate roll and pitch control using new APM_Control library
109		g.channel_roll.servo_out = g.rollController.get_servo_out(nav_roll_cd, speed_scaler, control_mode == STABILIZE);
110		g.channel_pitch.servo_out = g.pitchController.get_servo_out(nav_pitch_cd, speed_scaler, control_mode == STABILIZE);    
111	#endif
112	
113	    // Mix Stick input to allow users to override control surfaces
114	    // -----------------------------------------------------------
</Source>
        <MessageVariables>
          <MessageVariable Name="pitch_PID_input" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="system.pde, line 364" Id="3a5277de-fbb5-4d2d-bc21-57eb3f1aa3fa" Enabled="0" Message="Yaw Hold: {hover_yaw_hold_deg}" MessageTextType="0" PreProcessedMessage="Yaw Hold: {0}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\system.pde" FileLine="364" FileColumn="1" FunctionName="set_mode(byte mode)" FunctionLineOffset="25" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='3a5277de-fbb5-4d2d-bc21-57eb3f1aa3fa'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>357		case HOVER_PID_REFERENCE:
358		case HOVER_ADAPTIVE:
359			t_start_hover = millis(); // get the start time of the hover manuever 
360			pitch_init = ahrs.pitch;
361	
362		case HOVER_PID:  // I added this /////////////////////////////////////////////////////////////
363			hover_yaw_hold = ahrs.yaw;
--&gt;364			hover_yaw_hold_deg = hover_yaw_hold*(180/PI);
365			break;
366	
367	    case AUTO:
368	        update_auto();
369	        break;
370	
371	    case RTL:
372	        do_RTL();
373	        break;
</Source>
        <MessageVariables>
          <MessageVariable Name="hover_yaw_hold_deg" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="7" Name="Attitude.pde, line 409" Id="68545aff-6a26-4107-85e2-953274f5a222" Enabled="0" Message="Yaw PID Input: {yaw_PID_input}" MessageTextType="0" PreProcessedMessage="Yaw PID Input: {0}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\Attitude.pde" FileLine="409" FileColumn="1" FunctionName="calc_nav_yaw(float speed_scaler, float ch4_inf)" FunctionLineOffset="22" FunctionColumnOffset="1" HitCountTarget="50" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='68545aff-6a26-4107-85e2-953274f5a222'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>402	
403	    // a PID to coordinate the turn (drive y axis accel to zero)
404	    Vector3f temp = imu.get_accel();
405	    int32_t error = -temp.y*100.0;
406		yaw_PID_input = error;
407		}
408	
--&gt;409	    g.channel_rudder.servo_out += g.pidServoRudder.get_pid(yaw_PID_input, speed_scaler);
410	#else // APM_CONTROL == ENABLED
411	    // use the new APM_Control library
412		g.channel_rudder.servo_out = g.yawController.get_servo_out(speed_scaler, ch4_inf &lt; 0.25) + g.channel_roll.servo_out * g.kff_rudder_mix;
413	#endif
414	}
415	
416	
417	static void calc_nav_pitch()
418	{
</Source>
        <MessageVariables>
          <MessageVariable Name="yaw_PID_input" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="8" Name="ArduPlane.pde, line 804" Id="1c387733-1bf3-4a9c-b29f-6bb45b1a5b91" Enabled="0" Message="Roll {ahrs.roll_sensor}, Pitch {ahrs.pitch_sensor}, Yaw {ahrs.yaw_sensor}, Yaw rad {ahrs.yaw}" MessageTextType="0" PreProcessedMessage="Roll {0}, Pitch {1}, Yaw {2}, Yaw rad {3}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\ArduPlane.pde" FileLine="804" FileColumn="1" FunctionName="fast_loop()" FunctionLineOffset="24" FunctionColumnOffset="1" HitCountTarget="50" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1c387733-1bf3-4a9c-b29f-6bb45b1a5b91'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>797	    check_short_failsafe();
798	
799	#if HIL_MODE == HIL_MODE_SENSORS
800	    // update hil before AHRS update
801	    gcs_update();
802	#endif
803	
--&gt;804	    ahrs.update();
805	///////////// Quaternion stuff I added ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
806		// Convert current euler angles to quaternion
807		qcurrent.from_euler(ahrs.roll, ahrs.pitch, ahrs.yaw);
808	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
809	
810	    // uses the yaw from the DCM to give more accurate turns
811	    calc_bearing_error();
812	
813	# if HIL_MODE == HIL_MODE_DISABLED
</Source>
        <MessageVariables>
          <MessageVariable Name="ahrs.roll_sensor" Index="1" />
          <MessageVariable Name="ahrs.pitch_sensor" Index="2" />
          <MessageVariable Name="ahrs.yaw_sensor" Index="3" />
          <MessageVariable Name="ahrs.yaw" Index="4" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="9" Name="ArduPlane.pde, line 1252" Id="4ac150f3-b834-460b-8699-43a6b03692b6" Enabled="1" Message="Errors: Roll {roll_error_deg}, Pitch {pitch_error_deg}, Yaw {yaw_error_deg}" MessageTextType="0" PreProcessedMessage="Errors: Roll {0}, Pitch {1}, Yaw {2}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\ArduPlane.pde" FileLine="1252" FileColumn="1" FunctionName="update_current_flight_mode(void)" FunctionLineOffset="152" FunctionColumnOffset="1" HitCountTarget="50" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='4ac150f3-b834-460b-8699-43a6b03692b6'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1245				pitch_desired_deg = pitch_desired*(180/PI);
1246	
1247				qcommand.from_euler(0, pitch_desired, hover_yaw_hold);
1248				qerr = qcurrent.qerror(qcommand);
1249			// Convert quaternion error back to euler angles (rad)
1250				qerr.to_euler(_roll_error, _pitch_error, _yaw_error);
1251			// Convert from rad to deg
--&gt;1252				roll_error_deg = roll_error*(180/PI); pitch_error_deg = pitch_error*(180/PI); yaw_error_deg = yaw_error*(180/PI);
1253			// Convert from deg to centidegrees
1254				roll_error_centdeg = int32_t (roll_error_deg*100); pitch_error_centdeg = int32_t (pitch_error_deg*100); yaw_error_centdeg = int32_t (yaw_error_deg*100);
1255	
1256			
1257			
1258	
1259			#if HOVER_THROTTLE 
1260					// Calculate hover throttle
1261						calc_throttle_hover();
</Source>
        <MessageVariables>
          <MessageVariable Name="roll_error_deg" Index="1" />
          <MessageVariable Name="pitch_error_deg" Index="2" />
          <MessageVariable Name="yaw_error_deg" Index="3" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="10" Name="ArduPlane.pde, line 840" Id="166c8712-fb1d-448b-9c2d-7efcbe528898" Enabled="0" Message="Throttle {g.channel_throttle.servo_out}" MessageTextType="0" PreProcessedMessage="Throttle {0}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\ArduPlane.pde" FileLine="840" FileColumn="1" FunctionName="fast_loop()" FunctionLineOffset="60" FunctionColumnOffset="1" HitCountTarget="50" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='166c8712-fb1d-448b-9c2d-7efcbe528898'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>833	    // ----------------------------------------------
834	    if (control_mode &gt; MANUAL)
835	        stabilize();
836	
837	    // write out the servo PWM values
838	    // ------------------------------
839	    set_servos();
--&gt;840	
841	    gcs_update();
842	    gcs_data_stream_send();
843	}
844	
845	static void medium_loop()
846	{
847	#if MOUNT == ENABLED
848	    camera_mount.update_mount_position();
849	#endif
</Source>
        <MessageVariables>
          <MessageVariable Name="g.channel_throttle.servo_out" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="11" Name="Attitude.pde, line 221" Id="fe0a7ad7-ae39-4611-b7e0-d5193362a17b" Enabled="0" Message="Pitch diverged: {diverge_pitch}, Yaw diverged: {diverge_yaw}" MessageTextType="0" PreProcessedMessage="Pitch diverged: {0}, Yaw diverged: {1}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\Attitude.pde" FileLine="221" FileColumn="1" FunctionName="calc_throttle_hover()" FunctionLineOffset="11" FunctionColumnOffset="1" HitCountTarget="50" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='fe0a7ad7-ae39-4611-b7e0-d5193362a17b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>214		int32_t throttle_hover;
215		
216		/********************************
217		Divegence throttle control logic
218		*********************************/
219		// Check for divergence criteria in yaw and pitch axis only (ignore roll direction, it will take care of itself)
220		check_pitch_diverge();
--&gt;221		check_yaw_diverge();
222	
223		if (diverge_pitch || diverge_yaw) {
224		throttle_diverge = int16_t (g.throttle_max * 0.75);
225		} else {
226			throttle_diverge = int16_t (g.throttle_max * 0.4);
227			// changed min throttle to 50% because airplane was falling too fast (nope didnt help, changed it back to original)
228		}
229		
230	
</Source>
        <MessageVariables>
          <MessageVariable Name="diverge_pitch" Index="1" />
          <MessageVariable Name="diverge_yaw" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="12" Name="ArduPlane.pde, line 926" Id="1dd31765-ff0d-41a0-b924-fdab5f29accb" Enabled="0" Message="Sink rate: {sink_rate}" MessageTextType="0" PreProcessedMessage="Sink rate: {0}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\ArduPlane.pde" FileLine="926" FileColumn="1" FunctionName="medium_loop()" FunctionLineOffset="81" FunctionColumnOffset="1" HitCountTarget="10" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1dd31765-ff0d-41a0-b924-fdab5f29accb'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>919	
920	        // Read altitude from sensors
921	        // ------------------
922	        update_alt();
923	
924			//////////////////////////////////////////////////////////////////////////I added this//////////////////////////////////////////////////////////////
925			// calculate current sink rate
--&gt;926			calc_sink_rate();
927			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
928	
929	        // altitude smoothing
930	        // ------------------
931	        if (control_mode != FLY_BY_WIRE_B)
932	            calc_altitude_error();
933	
934	        // perform next command
935	        // --------------------
</Source>
        <MessageVariables>
          <MessageVariable Name="sink_rate" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="13" Name="ArduPlane.pde, line 923" Id="f3eb0173-f407-4bf6-b4fc-d703343b8e1b" Enabled="0" Message="Current alt: {current_loc.alt}, Last alt: {last_alt}" MessageTextType="0" PreProcessedMessage="Current alt: {0}, Last alt: {1}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\ArduPlane.pde" FileLine="923" FileColumn="1" FunctionName="medium_loop()" FunctionLineOffset="78" FunctionColumnOffset="1" HitCountTarget="10" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='f3eb0173-f407-4bf6-b4fc-d703343b8e1b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>916	#endif
917	
918	        read_receiver_rssi();
919	
920	        // Read altitude from sensors
921	        // ------------------
922	        update_alt();
--&gt;923	
924			//////////////////////////////////////////////////////////////////////////I added this//////////////////////////////////////////////////////////////
925			// calculate current sink rate
926			calc_sink_rate();
927			////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
928	
929	        // altitude smoothing
930	        // ------------------
931	        if (control_mode != FLY_BY_WIRE_B)
932	            calc_altitude_error();
</Source>
        <MessageVariables>
          <MessageVariable Name="current_loc.alt" Index="1" />
          <MessageVariable Name="last_alt" Index="2" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="14" Name="Attitude.pde, line 238" Id="62ae1858-3242-4862-a1ca-53f14c664073" Enabled="0" Message="Sink Rate: Command {sink_rate_cd}, Measured: {sink_rate}, Error: {sink_rate_error}" MessageTextType="0" PreProcessedMessage="Sink Rate: Command {0}, Measured: {1}, Error: {2}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\Attitude.pde" FileLine="238" FileColumn="1" FunctionName="calc_throttle_hover()" FunctionLineOffset="28" FunctionColumnOffset="1" HitCountTarget="50" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='62ae1858-3242-4862-a1ca-53f14c664073'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>231		/********************************
232		Sink rate throttle control logic
233		*********************************/
234		// Set desired sink rate
235		int32_t sink_rate_cd  = int32_t (g.channel_throttle.control_in - 50)*(100/25); //Command is in centimeters/second since thats what altitude readings are in
236		// changed max sink rate to +- 1 m/s from original 2 because airplane was falling too fast (nope didnt help, changed it back to original)
237		int32_t sink_rate_error = sink_rate_cd - sink_rate;
--&gt;238	
239		// Use total energy error PID values to command sink rate
240		throttle_sink = g.pidTeThrottle.get_pid(sink_rate_error);
241	
242		// Pick maximum throttle setting to send to servo
243		if (throttle_diverge &gt; throttle_sink) {
244			throttle_hover = throttle_diverge;
245		} else {
246			throttle_hover = throttle_sink;
247		}
</Source>
        <MessageVariables>
          <MessageVariable Name="sink_rate_cd" Index="1" />
          <MessageVariable Name="sink_rate" Index="2" />
          <MessageVariable Name="sink_rate_error" Index="3" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="15" Name="ArduPlane.pde, line 1245" Id="b5463e69-0052-4b6c-a920-d4c3c6c3fcab" Enabled="1" Message="Desired Pitch: {pitch_desired_deg}" MessageTextType="0" PreProcessedMessage="Desired Pitch: {0}" Condition="" ConditionType="1" CurrentHits="0" File="C:\Users\Brian\Documents\My Dropbox\Thesis\ArduPlane_Hover\ArduPlane\ArduPlane.pde" FileLine="1245" FileColumn="1" FunctionName="update_current_flight_mode(void)" FunctionLineOffset="150" FunctionColumnOffset="1" HitCountTarget="10" HitCountType="4" Language="C++" LocationType="3" Tag="&lt;vmbp Id='b5463e69-0052-4b6c-a920-d4c3c6c3fcab'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>1238				} else if (control_mode == HOVER_ADAPTIVE) {
1239					pitch_final = (PI/2);
1240					pitch_desired = pitch_reference_model();
1241				} else {
1242					pitch_desired = 0;
1243				}
1244	
--&gt;1245				pitch_desired_deg = pitch_desired*(180/PI);
1246	
1247				qcommand.from_euler(0, pitch_desired, hover_yaw_hold);
1248				qerr = qcurrent.qerror(qcommand);
1249			// Convert quaternion error back to euler angles (rad)
1250				qerr.to_euler(_roll_error, _pitch_error, _yaw_error);
1251			// Convert from rad to deg
1252				roll_error_deg = roll_error*(180/PI); pitch_error_deg = pitch_error*(180/PI); yaw_error_deg = yaw_error*(180/PI);
1253			// Convert from deg to centidegrees
1254				roll_error_centdeg = int32_t (roll_error_deg*100); pitch_error_centdeg = int32_t (pitch_error_deg*100); yaw_error_centdeg = int32_t (yaw_error_deg*100);
</Source>
        <MessageVariables>
          <MessageVariable Name="pitch_desired_deg" Index="1" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>